/*
 * This is the build.gradle configuration file of approximation.
 */

/************************
 * Plugin Configuration *
 ************************/

plugins {
  id("org.sonarqube") version "6.0.1.5171"
}



apply plugin: "eclipse"
apply plugin: "java"
apply plugin: "jacoco"
apply plugin: "maven-publish"

/**********************
 * Main Configuration *
 **********************/

def outDir = "${rootDir}/dist"
def jarDir = "${outDir}/home"

group = "fr.cril"
version = "0.1.0"



sourceCompatibility = "17"
targetCompatibility = "17"


/****************
 * Dependencies *
 ****************/

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'net.sourceforge.argparse4j', name:'argparse4j', version: '0.9.0'
    implementation files('lib/choco.jar')
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.6.0"
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-params", version: "5.6.0"
    testImplementation group: "org.junit.platform", name: "junit-platform-launcher", version: "1.6.0"
    testImplementation group: "org.junit.platform", name: "junit-platform-runner", version: "1.6.0"
}



/*************************
 * Eclipse Configuration *
 *************************/


/****************************************
 * Compilation Configuration for Jigsaw *
 ****************************************/



/**********************
 * Test Configuration *
 **********************/

// Making test resources available during test execution.
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/java/test"
}
processTestResources.dependsOn copyTestResources

// Configuring the use of JUnit 5.
test {
    useJUnitPlatform()
}

// Configuring the version of JaCoCo to use.
jacoco {
    toolVersion = "0.8.7"
}

// Asking for an XML output for JaCoCo.
jacocoTestReport {
    reports {
        xml.required = true
    }
}


/*************************
 * Javadoc Configuration *
 *************************/

tasks.withType(Javadoc) {
      failOnError false
      options.addStringOption('Xdoclint:none', '-quiet')
      options.addStringOption('encoding', 'UTF-8')
      options.addStringOption('charSet', 'UTF-8')
}


/****************
 * Distribution *
 ****************/

// Adding the Javadoc and source JARs to the generated artifacts.
java {
    withJavadocJar()
    withSourcesJar()
}

/*************
 * Packaging *
 *************/


// Putting the generated jars in the output directory.
tasks.withType(Jar) {
    destinationDirectory = file("${jarDir}")
}

// Collects external dependencies of Sat4j-CSP into the output directory.
task collectExternalDependencies(type: Copy) {
    from configurations.runtimeClasspath.collect {
        it
    }
    into "${jarDir}"
}

// Creating a gzipped-tarball with approximation and its dependencies.
task approx(type: Tar) {
    dependsOn jar
    dependsOn collectExternalDependencies

    from file("${jarDir}")
    destinationDirectory = file("${outDir}")
    archiveBaseName = "approximation"
    archiveExtension = "tgz"

    compression = Compression.GZIP
}

// Removes the binary files of approximation when cleaning.
task removeBinaries(type: Delete) {
    delete "dist"
}
clean.dependsOn removeBinaries


/*************
 * Functions *
 *************/


